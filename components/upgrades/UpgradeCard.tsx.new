import Image from "next/image";
import { tailwindToHex } from '@/utils/skills/calculations/skillColor';

interface UpgradeCardProps {
  name: string;
  value: number;
  maxTier: number;
  getImagePath: (name: string) => string;
  formatUpgradeName: (name: string) => string;
}

export function UpgradeCard({
  name,
  value,
  maxTier,
  getImagePath,
  formatUpgradeName,
}: UpgradeCardProps) {
  // Check upgrade status
  const isMaxTier = value >= maxTier;
  
  // Color helpers
  const getUpgradeColor = (value: number, maxTier: number): string => {
    const percentage = (value / maxTier) * 100;
    if (percentage === 100) return "text-red-500";
    if (percentage >= 75) return "text-purple-400";
    if (percentage >= 50) return "text-yellow-400";
    if (percentage >= 25) return "text-emerald-400";
    return "text-white";
  };

  const color = getUpgradeColor(value, maxTier);

  // Visual style getters
  const getBorderStyle = () => {
    if (isMaxTier)
      return {
        borderWidth: '3px',
        borderColor: '#ef4444', // Red for max tier
      };
    return { borderWidth: '1px', borderColor: tailwindToHex(color) };
  };

  return (
    <div
      className="relative bg-[#002626] p-4 rounded-lg border hover:bg-[#003333] transition-colors"
      style={{
        ...getBorderStyle(),
        ...(isMaxTier
          ? {
              boxShadow:
                '0 10px 25px -5px rgba(220, 38, 38, 0.3), 0 8px 10px -6px rgba(220, 38, 38, 0.2)',
            }
          : {}),
      }}
    >
      {/* Card content */}
      <div className="relative">
        {/* Upgrade header */}
        <div className="flex items-center gap-2 mb-1">
          <div className="relative w-5 h-5">
            <Image
              src={getImagePath(name)}
              alt={`${name} icon`}
              fill
              sizes="20px"
              className="object-contain"
              style={
                isMaxTier
                  ? {
                      filter: 'drop-shadow(0 0 2px rgba(255,0,0,0.8))',
                    }
                  : {}
              }
              loading="lazy"
            />
            {isMaxTier && (
              <div
                className="absolute -inset-1 rounded-full"
                style={{
                  background:
                    'radial-gradient(circle, rgba(255,215,0,0.2) 0%, rgba(255,215,0,0) 70%)',
                }}
              />
            )}
          </div>
          <p className="text-gray-300 text-sm">{formatUpgradeName(name)}</p>
        </div>

        {/* Tier display */}
        {isMaxTier ? (
          <p className="text-xl font-bold text-red-500">Max Tier</p>
        ) : (
          <p className={`text-xl font-bold ${color}`}>
            Tier {value}
          </p>
        )}

        {/* Tier counter */}
        <p className="text-xs text-gray-400">{`${value}/${maxTier} tiers`}</p>

        {/* Progress bar for all tiers */}
        <div className="mt-1 relative h-1 w-full bg-gray-700 rounded-full overflow-hidden">
          <div
            className="absolute h-full rounded-full"
            style={{
              width: `${Math.min(100, (value / maxTier) * 100)}%`,
              backgroundColor: isMaxTier ? '#ef4444' : tailwindToHex(color),
            }}
          />
        </div>
      </div>
    </div>
  );
}
